/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChangePasswordRequest;
import java.time.LocalDate;
import org.openapitools.client.model.LoginRequest;
import org.openapitools.client.model.RegistroPractica;
import org.openapitools.client.model.UsuarioDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsuarioServiceApiApi
 */
@Disabled
public class UsuarioServiceApiApiTest {

    private final UsuarioServiceApiApi api = new UsuarioServiceApiApi();

    /**
     * Borrar Registro
     *
     * Elimina un registro de práctica por ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void borrarRegistroTest() throws ApiException {
        Long id = null;
        String response = api.borrarRegistro(id);
        // TODO: test validations
    }

    /**
     * Cambia el pasword de User
     *
     * cambiael pasword
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cambiarContraseaTest() throws ApiException {
        ChangePasswordRequest changePasswordRequest = null;
        String response = api.cambiarContrasea(changePasswordRequest);
        // TODO: test validations
    }

    /**
     * Consultar detalle user
     *
     * Devuelve el detalle del usuario por ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarDetallesTest() throws ApiException {
        Long idUser = null;
        LocalDate fecha1 = null;
        LocalDate fecha2 = null;
        List<RegistroPractica> response = api.consultarDetalles(idUser, fecha1, fecha2);
        // TODO: test validations
    }

    /**
     * Crear Registro
     *
     * Crea un nuevo registro de práctica.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crearRegistroTest() throws ApiException {
        RegistroPractica registroPractica = null;
        String response = api.crearRegistro(registroPractica);
        // TODO: test validations
    }

    /**
     * Login de usuario
     *
     * Autentica al usuario y devuelve un token JWT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        LoginRequest loginRequest = null;
        UsuarioDTO response = api.login(loginRequest);
        // TODO: test validations
    }

}
