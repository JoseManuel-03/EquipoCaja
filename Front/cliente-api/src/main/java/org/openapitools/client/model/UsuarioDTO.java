/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Alumno;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsuarioDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-03T02:20:28.516136200+01:00[Europe/Madrid]", comments = "Generator version: 7.11.0")
public class UsuarioDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_NOMBRE_USUARIO = "nombreUsuario";
  @SerializedName(SERIALIZED_NAME_NOMBRE_USUARIO)
  @javax.annotation.Nullable
  private String nombreUsuario;

  public static final String SERIALIZED_NAME_CONTRASEñA = "contraseña";
  @SerializedName(SERIALIZED_NAME_CONTRASEñA)
  @javax.annotation.Nullable
  private String contraseña;

  public static final String SERIALIZED_NAME_PERFIL = "perfil";
  @SerializedName(SERIALIZED_NAME_PERFIL)
  @javax.annotation.Nullable
  private String perfil;

  public static final String SERIALIZED_NAME_USUARIO_ASOCIADO = "usuarioAsociado";
  @SerializedName(SERIALIZED_NAME_USUARIO_ASOCIADO)
  @javax.annotation.Nullable
  private Alumno usuarioAsociado;

  public static final String SERIALIZED_NAME_ACTIVO = "activo";
  @SerializedName(SERIALIZED_NAME_ACTIVO)
  @javax.annotation.Nullable
  private Boolean activo;

  public static final String SERIALIZED_NAME_CANTIDAD_HORAS = "cantidadHoras";
  @SerializedName(SERIALIZED_NAME_CANTIDAD_HORAS)
  @javax.annotation.Nullable
  private Double cantidadHoras;

  public UsuarioDTO() {
  }

  public UsuarioDTO id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public UsuarioDTO nombreUsuario(@javax.annotation.Nullable String nombreUsuario) {
    this.nombreUsuario = nombreUsuario;
    return this;
  }

  /**
   * Get nombreUsuario
   * @return nombreUsuario
   */
  @javax.annotation.Nullable
  public String getNombreUsuario() {
    return nombreUsuario;
  }

  public void setNombreUsuario(@javax.annotation.Nullable String nombreUsuario) {
    this.nombreUsuario = nombreUsuario;
  }


  public UsuarioDTO contraseña(@javax.annotation.Nullable String contraseña) {
    this.contraseña = contraseña;
    return this;
  }

  /**
   * Get contraseña
   * @return contraseña
   */
  @javax.annotation.Nullable
  public String getContraseña() {
    return contraseña;
  }

  public void setContraseña(@javax.annotation.Nullable String contraseña) {
    this.contraseña = contraseña;
  }


  public UsuarioDTO perfil(@javax.annotation.Nullable String perfil) {
    this.perfil = perfil;
    return this;
  }

  /**
   * Get perfil
   * @return perfil
   */
  @javax.annotation.Nullable
  public String getPerfil() {
    return perfil;
  }

  public void setPerfil(@javax.annotation.Nullable String perfil) {
    this.perfil = perfil;
  }


  public UsuarioDTO usuarioAsociado(@javax.annotation.Nullable Alumno usuarioAsociado) {
    this.usuarioAsociado = usuarioAsociado;
    return this;
  }

  /**
   * Get usuarioAsociado
   * @return usuarioAsociado
   */
  @javax.annotation.Nullable
  public Alumno getUsuarioAsociado() {
    return usuarioAsociado;
  }

  public void setUsuarioAsociado(@javax.annotation.Nullable Alumno usuarioAsociado) {
    this.usuarioAsociado = usuarioAsociado;
  }


  public UsuarioDTO activo(@javax.annotation.Nullable Boolean activo) {
    this.activo = activo;
    return this;
  }

  /**
   * Get activo
   * @return activo
   */
  @javax.annotation.Nullable
  public Boolean getActivo() {
    return activo;
  }

  public void setActivo(@javax.annotation.Nullable Boolean activo) {
    this.activo = activo;
  }


  public UsuarioDTO cantidadHoras(@javax.annotation.Nullable Double cantidadHoras) {
    this.cantidadHoras = cantidadHoras;
    return this;
  }

  /**
   * Get cantidadHoras
   * @return cantidadHoras
   */
  @javax.annotation.Nullable
  public Double getCantidadHoras() {
    return cantidadHoras;
  }

  public void setCantidadHoras(@javax.annotation.Nullable Double cantidadHoras) {
    this.cantidadHoras = cantidadHoras;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsuarioDTO usuarioDTO = (UsuarioDTO) o;
    return Objects.equals(this.id, usuarioDTO.id) &&
        Objects.equals(this.nombreUsuario, usuarioDTO.nombreUsuario) &&
        Objects.equals(this.contraseña, usuarioDTO.contraseña) &&
        Objects.equals(this.perfil, usuarioDTO.perfil) &&
        Objects.equals(this.usuarioAsociado, usuarioDTO.usuarioAsociado) &&
        Objects.equals(this.activo, usuarioDTO.activo) &&
        Objects.equals(this.cantidadHoras, usuarioDTO.cantidadHoras);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nombreUsuario, contraseña, perfil, usuarioAsociado, activo, cantidadHoras);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsuarioDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nombreUsuario: ").append(toIndentedString(nombreUsuario)).append("\n");
    sb.append("    contraseña: ").append(toIndentedString(contraseña)).append("\n");
    sb.append("    perfil: ").append(toIndentedString(perfil)).append("\n");
    sb.append("    usuarioAsociado: ").append(toIndentedString(usuarioAsociado)).append("\n");
    sb.append("    activo: ").append(toIndentedString(activo)).append("\n");
    sb.append("    cantidadHoras: ").append(toIndentedString(cantidadHoras)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nombreUsuario");
    openapiFields.add("contraseña");
    openapiFields.add("perfil");
    openapiFields.add("usuarioAsociado");
    openapiFields.add("activo");
    openapiFields.add("cantidadHoras");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsuarioDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsuarioDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsuarioDTO is not found in the empty JSON string", UsuarioDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsuarioDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsuarioDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nombreUsuario") != null && !jsonObj.get("nombreUsuario").isJsonNull()) && !jsonObj.get("nombreUsuario").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nombreUsuario` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nombreUsuario").toString()));
      }
      if ((jsonObj.get("contraseña") != null && !jsonObj.get("contraseña").isJsonNull()) && !jsonObj.get("contraseña").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contraseña` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contraseña").toString()));
      }
      if ((jsonObj.get("perfil") != null && !jsonObj.get("perfil").isJsonNull()) && !jsonObj.get("perfil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perfil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perfil").toString()));
      }
      // validate the optional field `usuarioAsociado`
      if (jsonObj.get("usuarioAsociado") != null && !jsonObj.get("usuarioAsociado").isJsonNull()) {
        Alumno.validateJsonElement(jsonObj.get("usuarioAsociado"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsuarioDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsuarioDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsuarioDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsuarioDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UsuarioDTO>() {
           @Override
           public void write(JsonWriter out, UsuarioDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsuarioDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsuarioDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsuarioDTO
   * @throws IOException if the JSON string is invalid with respect to UsuarioDTO
   */
  public static UsuarioDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsuarioDTO.class);
  }

  /**
   * Convert an instance of UsuarioDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

